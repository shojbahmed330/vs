import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\n\nconst SocketContext = createContext();\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport const SocketProvider = ({ children }) => {\n  const { user, token } = useAuth();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState(new Set());\n\n  useEffect(() => {\n    if (user && token) {\n      // Create socket connection\n      const newSocket = io(process.env.REACT_APP_SERVER_URL || 'http://localhost:5000', {\n        auth: {\n          token: token\n        },\n        transports: ['websocket']\n      });\n\n      newSocket.on('connect', () => {\n        console.log('Socket connected:', newSocket.id);\n        setIsConnected(true);\n      });\n\n      newSocket.on('disconnect', () => {\n        console.log('Socket disconnected');\n        setIsConnected(false);\n      });\n\n      newSocket.on('connect_error', (error) => {\n        console.error('Socket connection error:', error);\n        setIsConnected(false);\n      });\n\n      // Listen for user online/offline status\n      newSocket.on('user_online', (userId) => {\n        setOnlineUsers(prev => new Set([...prev, userId]));\n      });\n\n      newSocket.on('user_offline', (userId) => {\n        setOnlineUsers(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(userId);\n          return newSet;\n        });\n      });\n\n      setSocket(newSocket);\n\n      return () => {\n        newSocket.close();\n      };\n    } else if (socket) {\n      socket.close();\n      setSocket(null);\n      setIsConnected(false);\n    }\n  }, [user, token]);\n\n  // Socket event handlers\n  const emit = (event, data) => {\n    if (socket && isConnected) {\n      socket.emit(event, data);\n    }\n  };\n\n  const on = (event, callback) => {\n    if (socket) {\n      socket.on(event, callback);\n    }\n  };\n\n  const off = (event, callback) => {\n    if (socket) {\n      socket.off(event, callback);\n    }\n  };\n\n  // Helper functions for common events\n  const joinRoom = (roomId) => {\n    emit('join_room', { roomId });\n  };\n\n  const leaveRoom = (roomId) => {\n    emit('leave_room', { roomId });\n  };\n\n  const sendMessage = (data) => {\n    emit('send_message', data);\n  };\n\n  const sendTyping = (chatId, isTyping) => {\n    if (isTyping) {\n      emit('typing_start', { chatId });\n    } else {\n      emit('typing_stop', { chatId });\n    }\n  };\n\n  const sendPostActivity = (type, data) => {\n    emit(`post_${type}`, data);\n  };\n\n  const sendCallEvent = (event, data) => {\n    emit(event, data);\n  };\n\n  const sendStreamEvent = (event, data) => {\n    emit(event, data);\n  };\n\n  const isUserOnline = (userId) => {\n    return onlineUsers.has(userId);\n  };\n\n  const getOnlineUsersCount = () => {\n    return onlineUsers.size;\n  };\n\n  const value = {\n    socket,\n    isConnected,\n    onlineUsers,\n    emit,\n    on,\n    off,\n    joinRoom,\n    leaveRoom,\n    sendMessage,\n    sendTyping,\n    sendPostActivity,\n    sendCallEvent,\n    sendStreamEvent,\n    isUserOnline,\n    getOnlineUsersCount\n  };\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport default SocketContext;