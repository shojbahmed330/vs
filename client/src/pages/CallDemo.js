import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Typography,\n  Box,\n  Card,\n  CardContent,\n  Button,\n  Grid,\n  Alert,\n  Chip,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField\n} from '@mui/material';\nimport {\n  Call,\n  Videocam,\n  Settings,\n  History,\n  Phone,\n  VideoCall as VideoCallIcon,\n  RecordVoiceOver,\n  Hearing\n} from '@mui/icons-material';\nimport { useAgora } from '../../contexts/AgoraContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport QuickCallButton from '../Calls/QuickCallButton';\n\nconst CallDemo = () => {\n  const { user } = useAuth();\n  const { \n    isCallActive, \n    callMode, \n    startCall,\n    currentCallData,\n    localTracks,\n    remoteUsers\n  } = useAgora();\n  \n  const [showTestDialog, setShowTestDialog] = useState(false);\n  const [testUserId, setTestUserId] = useState('');\n  const [agoraConfig, setAgoraConfig] = useState({\n    appId: process.env.REACT_APP_AGORA_APP_ID || '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞-agora-app-id',\n    certificate: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞-agora-certificate'\n  });\n\n  const handleTestCall = async (isVideo = false) => {\n    if (!testUserId.trim()) {\n      alert('‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®');\n      return;\n    }\n    \n    try {\n      await startCall(testUserId, isVideo);\n      setShowTestDialog(false);\n    } catch (error) {\n      console.error('Error starting test call:', error);\n      alert('‡¶ï‡¶≤ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');\n    }\n  };\n\n  const features = [\n    {\n      icon: <Call sx={{ fontSize: 40, color: 'primary.main' }} />,\n      title: '‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤',\n      description: '‡¶â‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®',\n      status: '‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º'\n    },\n    {\n      icon: <Videocam sx={{ fontSize: 40, color: 'secondary.main' }} />,\n      title: '‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤',\n      description: 'HD ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ',\n      status: '‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º'\n    },\n    {\n      icon: <RecordVoiceOver sx={{ fontSize: 40, color: 'success.main' }} />,\n      title: '‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤',\n      description: '‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶≤ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£',\n      status: '‡¶Ü‡¶∏‡¶õ‡ßá ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á'\n    },\n    {\n      icon: <Hearing sx={{ fontSize: 40, color: 'warning.main' }} />,\n      title: '‡¶®‡¶Ø‡¶º‡ßá‡¶ú ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡ßá‡¶≤‡ßá‡¶∂‡¶®',\n      description: '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶≠‡¶æ‡¶®‡ßç‡¶∏ ‡¶®‡¶Ø‡¶º‡ßá‡¶ú ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡ßá‡¶≤‡ßá‡¶∂‡¶®',\n      status: '‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º'\n    }\n  ];\n\n  const requirements = [\n    {\n      item: 'Agora App ID',\n      status: agoraConfig.appId !== '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞-agora-app-id' ? '‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá' : '‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®',\n      color: agoraConfig.appId !== '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞-agora-app-id' ? 'success' : 'error'\n    },\n    {\n      item: '‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø',\n      status: '‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',\n      color: 'warning'\n    },\n    {\n      item: '‡¶Æ‡¶æ‡¶á‡¶ï‡ßç‡¶∞‡ßã‡¶´‡ßã‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø',\n      status: '‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',\n      color: 'warning'\n    },\n    {\n      item: '‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó',\n      status: '‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§',\n      color: 'success'\n    }\n  ];\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4, textAlign: 'center' }}>\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n          üìû Agora ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤ ‡¶°‡ßá‡¶Æ‡ßã\n        </Typography>\n        <Typography variant=\"h6\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          Messenger ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ì ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ\n        </Typography>\n        \n        {isCallActive && (\n          <Alert severity=\"success\" sx={{ mb: 3 }}>\n            <strong>‡¶ï‡¶≤ ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶®:</strong> {callMode === 'video' ? '‡¶≠‡¶ø‡¶°‡¶ø‡¶ì' : '‡¶Ö‡¶°‡¶ø‡¶ì'} ‡¶ï‡¶≤ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶Ü‡¶õ‡ßá\n          </Alert>\n        )}\n      </Box>\n\n      <Grid container spacing={4}>\n        {/* Features */}\n        <Grid item xs={12} md={8}>\n          <Typography variant=\"h5\" gutterBottom>\n            üöÄ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßÇ‡¶π\n          </Typography>\n          \n          <Grid container spacing={2} sx={{ mb: 4 }}>\n            {features.map((feature, index) => (\n              <Grid item xs={12} sm={6} key={index}>\n                <Card sx={{ height: '100%' }}>\n                  <CardContent sx={{ textAlign: 'center' }}>\n                    {feature.icon}\n                    <Typography variant=\"h6\" gutterBottom sx={{ mt: 1 }}>\n                      {feature.title}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                      {feature.description}\n                    </Typography>\n                    <Chip \n                      label={feature.status} \n                      color={feature.status === '‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º' ? 'success' : 'default'}\n                      size=\"small\"\n                    />\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n\n          {/* Test Section */}\n          <Paper sx={{ p: 3, mb: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              üß™ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßá‡¶ï‡¶∂‡¶®\n            </Typography>\n            \n            <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', alignItems: 'center' }}>\n              <Button\n                variant=\"contained\"\n                startIcon={<Call />}\n                onClick={() => setShowTestDialog(true)}\n                disabled={isCallActive}\n              >\n                ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®\n              </Button>\n              \n              <Button\n                variant=\"outlined\"\n                startIcon={<History />}\n                href=\"/calls\"\n              >\n                ‡¶ï‡¶≤ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n              </Button>\n              \n              <Chip \n                label={`‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ: ${isCallActive ? '‡¶ï‡¶≤ ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶®' : '‡¶ï‡¶≤ ‡¶®‡ßá‡¶á'}`}\n                color={isCallActive ? 'success' : 'default'}\n              />\n            </Box>\n          </Paper>\n\n          {/* Current Call Info */}\n          {isCallActive && currentCallData && (\n            <Paper sx={{ p: 3, mb: 3, bgcolor: 'success.50' }}>\n              <Typography variant=\"h6\" gutterBottom color=\"success.main\">\n                üì± ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ï‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø\n              </Typography>\n              \n              <List dense>\n                <ListItem>\n                  <ListItemText \n                    primary=\"‡¶ï‡¶≤ ‡¶ü‡¶æ‡¶á‡¶™\" \n                    secondary={callMode === 'video' ? '‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤' : '‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤'}\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText \n                    primary=\"‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤\" \n                    secondary={currentCallData.channelName}\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText \n                    primary=\"‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï\" \n                    secondary={`‡¶Ö‡¶°‡¶ø‡¶ì: ${localTracks.audio ? '‡¶Ü‡¶õ‡ßá' : '‡¶®‡ßá‡¶á'}, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì: ${localTracks.video ? '‡¶Ü‡¶õ‡ßá' : '‡¶®‡ßá‡¶á'}`}\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText \n                    primary=\"‡¶∞‡¶ø‡¶Æ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ\" \n                    secondary={`${Object.keys(remoteUsers).length} ‡¶ú‡¶® ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§`}\n                  />\n                </ListItem>\n              </List>\n            </Paper>\n          )}\n        </Grid>\n\n        {/* Setup & Requirements */}\n        <Grid item xs={12} md={4}>\n          <Typography variant=\"h5\" gutterBottom>\n            ‚öôÔ∏è ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏\n          </Typography>\n          \n          <Card sx={{ mb: 3 }}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™\n              </Typography>\n              \n              <List dense>\n                {requirements.map((req, index) => (\n                  <React.Fragment key={index}>\n                    <ListItem sx={{ px: 0 }}>\n                      <ListItemText \n                        primary={req.item}\n                        secondary={\n                          <Chip \n                            label={req.status} \n                            color={req.color} \n                            size=\"small\"\n                          />\n                        }\n                      />\n                    </ListItem>\n                    {index < requirements.length - 1 && <Divider />}\n                  </React.Fragment>\n                ))}\n              </List>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®\n              </Typography>\n              \n              {user && (\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\" gutterBottom>\n                    ‡¶®‡¶ø‡¶ú‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶ü‡ßá‡¶∏‡ßç‡¶ü):\n                  </Typography>\n                  <QuickCallButton \n                    userId={user._id || user.id}\n                    userName={user.fullName}\n                    disabled={isCallActive}\n                  />\n                </Box>\n              )}\n              \n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                <Button \n                  variant=\"outlined\" \n                  size=\"small\" \n                  startIcon={<Settings />}\n                  onClick={() => alert('‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶Ü‡¶∏‡¶õ‡ßá ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á')}\n                >\n                  ‡¶ï‡¶≤ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏\n                </Button>\n                \n                <Button \n                  variant=\"outlined\" \n                  size=\"small\" \n                  startIcon={<VideoCallIcon />}\n                  href=\"/calls\"\n                >\n                  ‡¶ï‡¶≤ ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Test Call Dialog */}\n      <Dialog \n        open={showTestDialog} \n        onClose={() => setShowTestDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®</DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            label=\"‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø\"\n            value={testUserId}\n            onChange={(e) => setTestUserId(e.target.value)}\n            placeholder=\"‡¶Ø‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶§‡¶æ‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø\"\n            helperText=\"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®\"\n            sx={{ mb: 3 }}\n          />\n          \n          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>\n            <Button\n              variant=\"contained\"\n              startIcon={<Call />}\n              onClick={() => handleTestCall(false)}\n              disabled={!testUserId.trim()}\n            >\n              ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤\n            </Button>\n            \n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              startIcon={<Videocam />}\n              onClick={() => handleTestCall(true)}\n              disabled={!testUserId.trim()}\n            >\n              ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤\n            </Button>\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default CallDemo;