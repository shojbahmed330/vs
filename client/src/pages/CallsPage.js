import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Typography,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Fab,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  IconButton,\n  TextField,\n  InputAdornment,\n  Tabs,\n  Tab,\n  Paper,\n  Chip,\n  Alert\n} from '@mui/material';\nimport {\n  Call,\n  Videocam,\n  Add,\n  Search,\n  ContactPhone,\n  History,\n  VideoCall as VideoCallIcon,\n  Phone,\n  Person\n} from '@mui/icons-material';\nimport { useAgora } from '../../contexts/AgoraContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport CallHistory from '../Calls/CallHistory';\nimport axios from 'axios';\n\nconst CallsPage = () => {\n  const { startCall, isCallActive } = useAgora();\n  const { user } = useAuth();\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [showNewCallDialog, setShowNewCallDialog] = useState(false);\n  const [contacts, setContacts] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [callStats, setCallStats] = useState(null);\n\n  useEffect(() => {\n    fetchCallStats();\n    if (showNewCallDialog) {\n      fetchContacts();\n    }\n  }, [showNewCallDialog]);\n\n  const fetchCallStats = async () => {\n    try {\n      const response = await axios.get('/api/calls/stats');\n      setCallStats(response.data);\n    } catch (error) {\n      console.error('Error fetching call stats:', error);\n    }\n  };\n\n  const fetchContacts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/users/contacts');\n      setContacts(response.data);\n    } catch (error) {\n      console.error('Error fetching contacts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleStartCall = async (targetUserId, isVideo = false) => {\n    try {\n      await startCall(targetUserId, isVideo);\n      setShowNewCallDialog(false);\n    } catch (error) {\n      console.error('Error starting call:', error);\n    }\n  };\n\n  const filteredContacts = contacts.filter(contact => \n    contact.fullName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    contact.username?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const tabContent = [\n    {\n      label: '‡¶∏‡¶æ‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï',\n      icon: <History />,\n      content: <CallHistory />\n    },\n    {\n      label: '‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®',\n      icon: <ContactPhone />,\n      content: (\n        <Box sx={{ p: 2 }}>\n          {callStats ? (\n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={6} md={3}>\n                <Card>\n                  <CardContent sx={{ textAlign: 'center' }}>\n                    <Call color=\"primary\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"h4\">{callStats.totalCalls}</Typography>\n                    <Typography color=\"text.secondary\">‡¶Æ‡ßã‡¶ü ‡¶ï‡¶≤</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              \n              <Grid item xs={12} sm={6} md={3}>\n                <Card>\n                  <CardContent sx={{ textAlign: 'center' }}>\n                    <VideoCallIcon color=\"secondary\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"h4\">{callStats.videoCalls}</Typography>\n                    <Typography color=\"text.secondary\">‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              \n              <Grid item xs={12} sm={6} md={3}>\n                <Card>\n                  <CardContent sx={{ textAlign: 'center' }}>\n                    <Phone color=\"success\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"h4\">{callStats.audioCalls}</Typography>\n                    <Typography color=\"text.secondary\">‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ï‡¶≤</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              \n              <Grid item xs={12} sm={6} md={3}>\n                <Card>\n                  <CardContent sx={{ textAlign: 'center' }}>\n                    <History color=\"info\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"h4\">\n                      {Math.round(callStats.totalDuration / 60)}‡¶Æ‡¶ø\n                    </Typography>\n                    <Typography color=\"text.secondary\">‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡¶Ø‡¶º</Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      ‡¶è‡¶á ‡¶Æ‡¶æ‡¶∏‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®\n                    </Typography>\n                    <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n                      <Chip \n                        label={`‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶≤: ${callStats.completedCalls}`} \n                        color=\"success\" \n                      />\n                      <Chip \n                        label={`‡¶Æ‡¶ø‡¶∏‡¶° ‡¶ï‡¶≤: ${callStats.missedCalls}`} \n                        color=\"error\" \n                      />\n                      <Chip \n                        label={`‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶§: ${callStats.rejectedCalls}`} \n                        color=\"warning\" \n                      />\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          ) : (\n            <Typography>‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</Typography>\n          )}\n        </Box>\n      )\n    }\n  ];\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 3 }}>\n      {/* Header */}\n      <Box sx={{ mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          üìû ‡¶ï‡¶≤ ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞\n        </Typography>\n        <Typography variant=\"subtitle1\" color=\"text.secondary\">\n          ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶ï‡¶≤ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®\n        </Typography>\n      </Box>\n\n      {/* Active call alert */}\n      {isCallActive && (\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶≤ ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶Ü‡¶õ‡ßá‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ï‡¶≤ ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n        </Alert>\n      )}\n\n      {/* Main content */}\n      <Paper sx={{ width: '100%' }}>\n        <Tabs \n          value={selectedTab} \n          onChange={(e, newValue) => setSelectedTab(newValue)}\n          variant=\"fullWidth\"\n        >\n          {tabContent.map((tab, index) => (\n            <Tab \n              key={index}\n              label={tab.label} \n              icon={tab.icon}\n              iconPosition=\"start\"\n            />\n          ))}\n        </Tabs>\n        \n        <Box sx={{ minHeight: 500 }}>\n          {tabContent[selectedTab]?.content}\n        </Box>\n      </Paper>\n\n      {/* New call FAB */}\n      <Fab\n        color=\"primary\"\n        aria-label=\"‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶≤\"\n        onClick={() => setShowNewCallDialog(true)}\n        disabled={isCallActive}\n        sx={{\n          position: 'fixed',\n          bottom: 16,\n          right: 16\n        }}\n      >\n        <Add />\n      </Fab>\n\n      {/* New call dialog */}\n      <Dialog\n        open={showNewCallDialog}\n        onClose={() => setShowNewCallDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®\n        </DialogTitle>\n        <DialogContent>\n          {/* Search field */}\n          <TextField\n            fullWidth\n            placeholder=\"‡¶®‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <Search />\n                </InputAdornment>\n              ),\n            }}\n            sx={{ mb: 2 }}\n          />\n\n          {/* Contacts list */}\n          <List sx={{ maxHeight: 400, overflow: 'auto' }}>\n            {loading ? (\n              <ListItem>\n                <Typography>‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</Typography>\n              </ListItem>\n            ) : filteredContacts.length === 0 ? (\n              <ListItem>\n                <Typography color=\"text.secondary\">\n                  {searchQuery ? '‡¶ï‡ßã‡¶®‡ßã ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø' : '‡¶ï‡ßã‡¶®‡ßã ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶®‡ßá‡¶á'}\n                </Typography>\n              </ListItem>\n            ) : (\n              filteredContacts.map((contact) => (\n                <ListItem key={contact._id}>\n                  <ListItemAvatar>\n                    <Avatar src={contact.avatar}>\n                      {contact.fullName?.[0] || contact.username?.[0]}\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={contact.fullName || contact.username}\n                    secondary={contact.email}\n                  />\n                  <Box sx={{ display: 'flex', gap: 1 }}>\n                    <IconButton\n                      color=\"primary\"\n                      onClick={() => handleStartCall(contact._id, false)}\n                      disabled={isCallActive}\n                    >\n                      <Call />\n                    </IconButton>\n                    <IconButton\n                      color=\"secondary\"\n                      onClick={() => handleStartCall(contact._id, true)}\n                      disabled={isCallActive}\n                    >\n                      <Videocam />\n                    </IconButton>\n                  </Box>\n                </ListItem>\n              ))\n            )}\n          </List>\n        </DialogContent>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default CallsPage;