import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const friendsAPI = {\n  // Send friend request\n  sendRequest: async (receiverId, message = '') => {\n    const response = await api.post('/friends/send', {\n      receiverId,\n      message\n    });\n    return response.data;\n  },\n\n  // Accept friend request\n  acceptRequest: async (requestId) => {\n    const response = await api.put(`/friends/accept/${requestId}`);\n    return response.data;\n  },\n\n  // Reject friend request\n  rejectRequest: async (requestId) => {\n    const response = await api.put(`/friends/reject/${requestId}`);\n    return response.data;\n  },\n\n  // Cancel friend request\n  cancelRequest: async (requestId) => {\n    const response = await api.delete(`/friends/cancel/${requestId}`);\n    return response.data;\n  },\n\n  // Get pending friend requests (received)\n  getPendingRequests: async (page = 1, limit = 10) => {\n    const response = await api.get(`/friends/pending?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n\n  // Get sent friend requests\n  getSentRequests: async (page = 1, limit = 10) => {\n    const response = await api.get(`/friends/sent?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n\n  // Get friend suggestions\n  getSuggestions: async (limit = 10) => {\n    const response = await api.get(`/friends/suggestions?limit=${limit}`);\n    return response.data;\n  },\n\n  // Remove friend\n  removeFriend: async (friendId) => {\n    const response = await api.delete(`/friends/remove/${friendId}`);\n    return response.data;\n  },\n\n  // Get friends list\n  getFriendsList: async (page = 1, limit = 20, search = '') => {\n    const response = await api.get(`/friends/list?page=${page}&limit=${limit}&search=${search}`);\n    return response.data;\n  }\n};\n\nexport const notificationsAPI = {\n  // Get all notifications\n  getNotifications: async (page = 1, limit = 20, unreadOnly = false) => {\n    const response = await api.get(`/notifications?page=${page}&limit=${limit}&unreadOnly=${unreadOnly}`);\n    return response.data;\n  },\n\n  // Mark notification as read\n  markAsRead: async (notificationId) => {\n    const response = await api.put(`/notifications/read/${notificationId}`);\n    return response.data;\n  },\n\n  // Mark all notifications as read\n  markAllAsRead: async () => {\n    const response = await api.put('/notifications/read-all');\n    return response.data;\n  },\n\n  // Delete notification\n  deleteNotification: async (notificationId) => {\n    const response = await api.delete(`/notifications/${notificationId}`);\n    return response.data;\n  },\n\n  // Get unread count\n  getUnreadCount: async () => {\n    const response = await api.get('/notifications/unread-count');\n    return response.data;\n  }\n};\n\nexport const privacyAPI = {\n  // Get privacy settings\n  getPrivacySettings: async () => {\n    const response = await api.get('/privacy');\n    return response.data;\n  },\n\n  // Update privacy settings\n  updatePrivacySettings: async (settings) => {\n    const response = await api.put('/privacy', settings);\n    return response.data;\n  },\n\n  // Update post visibility settings\n  updatePostPrivacy: async (postVisibility) => {\n    const response = await api.put('/privacy/posts', { postVisibility });\n    return response.data;\n  },\n\n  // Update profile visibility settings\n  updateProfilePrivacy: async (profileVisibility) => {\n    const response = await api.put('/privacy/profile', { profileVisibility });\n    return response.data;\n  },\n\n  // Block user\n  blockUser: async (userToBlockId, reason = '') => {\n    const response = await api.post('/privacy/block', {\n      userToBlockId,\n      reason\n    });\n    return response.data;\n  },\n\n  // Unblock user\n  unblockUser: async (userToUnblockId) => {\n    const response = await api.post('/privacy/unblock', {\n      userToUnblockId\n    });\n    return response.data;\n  },\n\n  // Restrict user\n  restrictUser: async (userToRestrictId) => {\n    const response = await api.post('/privacy/restrict', {\n      userToRestrictId\n    });\n    return response.data;\n  },\n\n  // Unrestrict user\n  unrestrictUser: async (userToUnrestrictId) => {\n    const response = await api.post('/privacy/unrestrict', {\n      userToUnrestrictId\n    });\n    return response.data;\n  },\n\n  // Create custom list\n  createCustomList: async (name, members = []) => {\n    const response = await api.post('/privacy/custom-lists', {\n      name,\n      members\n    });\n    return response.data;\n  },\n\n  // Update custom list\n  updateCustomList: async (listId, name, members) => {\n    const response = await api.put(`/privacy/custom-lists/${listId}`, {\n      name,\n      members\n    });\n    return response.data;\n  },\n\n  // Delete custom list\n  deleteCustomList: async (listId) => {\n    const response = await api.delete(`/privacy/custom-lists/${listId}`);\n    return response.data;\n  },\n\n  // Get blocked users\n  getBlockedUsers: async () => {\n    const response = await api.get('/privacy/blocked');\n    return response.data;\n  }\n};\n\nexport default {\n  friendsAPI,\n  notificationsAPI,\n  privacyAPI\n};