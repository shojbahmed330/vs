import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Avatar,\n  Button,\n  IconButton,\n  Badge,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  CircularProgress,\n  Alert,\n  Chip,\n  Menu,\n  MenuItem,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Switch,\n  FormControlLabel\n} from '@mui/material';\nimport {\n  Notifications,\n  NotificationsNone,\n  MarkEmailRead,\n  Delete,\n  MoreVert,\n  PersonAdd,\n  Favorite,\n  Comment,\n  Share,\n  Cake,\n  Event,\n  Group,\n  LiveTv,\n  Visibility,\n  Settings\n} from '@mui/icons-material';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { notificationsAPI } from '../../api/friends';\nimport { useSocket } from '../../contexts/SocketContext';\n\nconst NotificationCenter = () => {\n  const { user } = useAuth();\n  const socket = useSocket();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(null);\n  const [message, setMessage] = useState('');\n  const [filterUnread, setFilterUnread] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedNotification, setSelectedNotification] = useState(null);\n  const [settingsDialog, setSettingsDialog] = useState(false);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n\n  useEffect(() => {\n    loadNotifications();\n    loadUnreadCount();\n  }, [filterUnread]);\n\n  useEffect(() => {\n    // Listen for real-time notifications\n    if (socket) {\n      socket.on('new_notification', (notification) => {\n        setNotifications(prev => [notification, ...prev]);\n        setUnreadCount(prev => prev + 1);\n      });\n\n      return () => {\n        socket.off('new_notification');\n      };\n    }\n  }, [socket]);\n\n  const loadNotifications = async (pageNum = 1) => {\n    try {\n      setLoading(pageNum === 1);\n      const data = await notificationsAPI.getNotifications(pageNum, 20, filterUnread);\n      \n      if (pageNum === 1) {\n        setNotifications(data.notifications || []);\n      } else {\n        setNotifications(prev => [...prev, ...(data.notifications || [])]);\n      }\n      \n      setUnreadCount(data.unreadCount || 0);\n      setHasMore(data.pagination?.page < data.pagination?.pages);\n      setPage(pageNum);\n    } catch (error) {\n      setMessage('নোটিফিকেশন লোড করতে সমস্যা হয়েছে');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadUnreadCount = async () => {\n    try {\n      const data = await notificationsAPI.getUnreadCount();\n      setUnreadCount(data.unreadCount || 0);\n    } catch (error) {\n      console.error('Error loading unread count:', error);\n    }\n  };\n\n  const handleMarkAsRead = async (notificationId) => {\n    try {\n      setProcessing(notificationId);\n      await notificationsAPI.markAsRead(notificationId);\n      \n      setNotifications(prev => \n        prev.map(n => \n          n._id === notificationId ? { ...n, isRead: true } : n\n        )\n      );\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      setMessage('নোটিফিকেশন পড়া হিসাবে চিহ্নিত করতে সমস্যা হয়েছে');\n    } finally {\n      setProcessing(null);\n    }\n  };\n\n  const handleMarkAllAsRead = async () => {\n    try {\n      setLoading(true);\n      await notificationsAPI.markAllAsRead();\n      \n      setNotifications(prev => \n        prev.map(n => ({ ...n, isRead: true }))\n      );\n      setUnreadCount(0);\n      setMessage('সব নোটিফিকেশন পড়া হিসাবে চিহ্নিত করা হয়েছে');\n    } catch (error) {\n      setMessage('সব নোটিফিকেশন চিহ্নিত করতে সমস্যা হয়েছে');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteNotification = async (notificationId) => {\n    try {\n      setProcessing(notificationId);\n      await notificationsAPI.deleteNotification(notificationId);\n      \n      const notification = notifications.find(n => n._id === notificationId);\n      setNotifications(prev => prev.filter(n => n._id !== notificationId));\n      \n      if (notification && !notification.isRead) {\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      }\n      \n      setMessage('নোটিফিকেশন ডিলিট করা হয়েছে');\n    } catch (error) {\n      setMessage('নোটিফিকেশন ডিলিট করতে সমস্যা হয়েছে');\n    } finally {\n      setProcessing(null);\n      setAnchorEl(null);\n    }\n  };\n\n  const getNotificationIcon = (type) => {\n    switch (type) {\n      case 'friend_request':\n      case 'friend_accept':\n        return <PersonAdd color=\"primary\" />;\n      case 'like':\n        return <Favorite color=\"error\" />;\n      case 'comment':\n        return <Comment color=\"info\" />;\n      case 'share':\n        return <Share color=\"success\" />;\n      case 'birthday':\n        return <Cake color=\"warning\" />;\n      case 'event_invite':\n        return <Event color=\"secondary\" />;\n      case 'group_invite':\n        return <Group color=\"primary\" />;\n      case 'live_stream':\n        return <LiveTv color=\"error\" />;\n      case 'story_view':\n        return <Visibility color=\"info\" />;\n      default:\n        return <Notifications />;\n    }\n  };\n\n  const getNotificationColor = (type) => {\n    switch (type) {\n      case 'friend_request':\n      case 'friend_accept':\n        return 'primary';\n      case 'like':\n        return 'error';\n      case 'comment':\n        return 'info';\n      case 'share':\n        return 'success';\n      case 'birthday':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleLoadMore = () => {\n    if (hasMore && !loading) {\n      loadNotifications(page + 1);\n    }\n  };\n\n  const openMenu = (event, notification) => {\n    event.stopPropagation();\n    setAnchorEl(event.currentTarget);\n    setSelectedNotification(notification);\n  };\n\n  const closeMenu = () => {\n    setAnchorEl(null);\n    setSelectedNotification(null);\n  };\n\n  const handleNotificationClick = (notification) => {\n    if (!notification.isRead) {\n      handleMarkAsRead(notification._id);\n    }\n    \n    // Navigate based on notification type\n    // You can implement navigation logic here\n  };\n\n  return (\n    <Box p={3}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Box display=\"flex\" alignItems=\"center\" gap={2}>\n          <Badge badgeContent={unreadCount} color=\"error\">\n            <Notifications fontSize=\"large\" />\n          </Badge>\n          <Typography variant=\"h4\">\n            নোটিফিকেশন\n          </Typography>\n        </Box>\n        <Box display=\"flex\" gap={1}>\n          <Button\n            variant=\"outlined\"\n            startIcon={<MarkEmailRead />}\n            onClick={handleMarkAllAsRead}\n            disabled={unreadCount === 0 || loading}\n          >\n            সব পড়া হয়েছে\n          </Button>\n          <IconButton onClick={() => setSettingsDialog(true)}>\n            <Settings />\n          </IconButton>\n        </Box>\n      </Box>\n\n      {message && (\n        <Alert \n          severity=\"info\" \n          sx={{ mb: 2 }}\n          onClose={() => setMessage('')}\n        >\n          {message}\n        </Alert>\n      )}\n\n      <Box mb={2}>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={filterUnread}\n              onChange={(e) => setFilterUnread(e.target.checked)}\n            />\n          }\n          label=\"শুধু অপঠিত নোটিফিকেশন দেখান\"\n        />\n      </Box>\n\n      {loading && notifications.length === 0 ? (\n        <Box display=\"flex\" justifyContent=\"center\" p={4}>\n          <CircularProgress />\n        </Box>\n      ) : (\n        <>\n          {notifications.length === 0 ? (\n            <Card>\n              <CardContent>\n                <Box textAlign=\"center\" py={4}>\n                  <NotificationsNone sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n                  <Typography variant=\"h6\" color=\"text.secondary\">\n                    কোনো নোটিফিকেশন নেই\n                  </Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          ) : (\n            <List>\n              {notifications.map((notification, index) => (\n                <React.Fragment key={notification._id}>\n                  <ListItem\n                    button\n                    onClick={() => handleNotificationClick(notification)}\n                    sx={{\n                      bgcolor: notification.isRead ? 'transparent' : 'action.hover',\n                      borderRadius: 1,\n                      mb: 1\n                    }}\n                  >\n                    <ListItemAvatar>\n                      <Box position=\"relative\">\n                        <Avatar src={notification.sender?.avatar}>\n                          {notification.sender?.name?.charAt(0)}\n                        </Avatar>\n                        <Box\n                          position=\"absolute\"\n                          bottom={-4}\n                          right={-4}\n                          bgcolor=\"background.paper\"\n                          borderRadius=\"50%\"\n                          p={0.5}\n                        >\n                          {getNotificationIcon(notification.type)}\n                        </Box>\n                      </Box>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          <Typography variant=\"body1\">\n                            {notification.message}\n                          </Typography>\n                          {!notification.isRead && (\n                            <Chip \n                              size=\"small\" \n                              label=\"নতুন\" \n                              color={getNotificationColor(notification.type)}\n                            />\n                          )}\n                        </Box>\n                      }\n                      secondary={\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {notification.timeAgo || new Date(notification.createdAt).toLocaleDateString('bn-BD')}\n                        </Typography>\n                      }\n                    />\n                    <ListItemSecondaryAction>\n                      <IconButton\n                        edge=\"end\"\n                        onClick={(e) => openMenu(e, notification)}\n                        disabled={processing === notification._id}\n                      >\n                        {processing === notification._id ? (\n                          <CircularProgress size={20} />\n                        ) : (\n                          <MoreVert />\n                        )}\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                  {index < notifications.length - 1 && <Divider />}\n                </React.Fragment>\n              ))}\n            </List>\n          )}\n\n          {hasMore && (\n            <Box textAlign=\"center\" mt={2}>\n              <Button\n                variant=\"outlined\"\n                onClick={handleLoadMore}\n                disabled={loading}\n              >\n                {loading ? <CircularProgress size={20} /> : 'আরো লোড করুন'}\n              </Button>\n            </Box>\n          )}\n        </>\n      )}\n\n      {/* Notification Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={closeMenu}\n      >\n        {selectedNotification && !selectedNotification.isRead && (\n          <MenuItem onClick={() => {\n            handleMarkAsRead(selectedNotification._id);\n            closeMenu();\n          }}>\n            <MarkEmailRead sx={{ mr: 1 }} />\n            পড়া হয়েছে চিহ্নিত করুন\n          </MenuItem>\n        )}\n        <MenuItem onClick={() => {\n          handleDeleteNotification(selectedNotification._id);\n        }}>\n          <Delete sx={{ mr: 1 }} color=\"error\" />\n          ডিলিট করুন\n        </MenuItem>\n      </Menu>\n\n      {/* Settings Dialog */}\n      <Dialog\n        open={settingsDialog}\n        onClose={() => setSettingsDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          নোটিফিকেশন সেটিংস\n        </DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" color=\"text.secondary\" mb={2}>\n            আপনার নোটিফিকেশন পছন্দগুলি কাস্টমাইজ করুন\n          </Typography>\n          {/* Add notification settings here */}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setSettingsDialog(false)}>\n            বন্ধ করুন\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default NotificationCenter;