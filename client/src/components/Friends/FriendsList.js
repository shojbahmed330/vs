import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Avatar,\n  Button,\n  TextField,\n  Grid,\n  IconButton,\n  Menu,\n  MenuItem,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  CircularProgress,\n  Alert,\n  InputAdornment\n} from '@mui/material';\nimport {\n  People,\n  Search,\n  MoreVert,\n  Message,\n  Phone,\n  VideoCall,\n  PersonRemove,\n  Block,\n  Report,\n  Close,\n  CheckCircle,\n  RadioButtonUnchecked\n} from '@mui/icons-material';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { friendsAPI, privacyAPI } from '../../api/friends';\n\nconst FriendsList = () => {\n  const { user } = useAuth();\n  const [friends, setFriends] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedFriends, setSelectedFriends] = useState([]);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedFriend, setSelectedFriend] = useState(null);\n  const [confirmDialog, setConfirmDialog] = useState(null);\n  const [message, setMessage] = useState('');\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [isSelectionMode, setIsSelectionMode] = useState(false);\n\n  useEffect(() => {\n    loadFriends();\n  }, [searchTerm]);\n\n  const loadFriends = async (pageNum = 1) => {\n    try {\n      setLoading(pageNum === 1);\n      const data = await friendsAPI.getFriendsList(pageNum, 20, searchTerm);\n      \n      if (pageNum === 1) {\n        setFriends(data.friends || []);\n      } else {\n        setFriends(prev => [...prev, ...(data.friends || [])]);\n      }\n      \n      setHasMore(data.pagination?.page < data.pagination?.pages);\n      setPage(pageNum);\n    } catch (error) {\n      setMessage('বন্ধু তালিকা লোড করতে সমস্যা হয়েছে');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRemoveFriend = async (friendId) => {\n    try {\n      await friendsAPI.removeFriend(friendId);\n      setFriends(prev => prev.filter(friend => friend._id !== friendId));\n      setMessage('বন্ধু তালিকা থেকে সরানো হয়েছে');\n      setConfirmDialog(null);\n    } catch (error) {\n      setMessage('বন্ধু সরাতে সমস্যা হয়েছে');\n    }\n  };\n\n  const handleBlockUser = async (friendId) => {\n    try {\n      await privacyAPI.blockUser(friendId, 'বন্ধু তালিকা থেকে ব্লক করা');\n      setFriends(prev => prev.filter(friend => friend._id !== friendId));\n      setMessage('ব্যবহারকারী ব্লক করা হয়েছে');\n      setConfirmDialog(null);\n    } catch (error) {\n      setMessage('ব্যবহারকারী ব্লক করতে সমস্যা হয়েছে');\n    }\n  };\n\n  const handleRestrictUser = async (friendId) => {\n    try {\n      await privacyAPI.restrictUser(friendId);\n      setMessage('ব্যবহারকারী রেস্ট্রিক্ট করা হয়েছে');\n      setAnchorEl(null);\n    } catch (error) {\n      setMessage('ব্যবহারকারী রেস্ট্রিক্ট করতে সমস্যা হয়েছে');\n    }\n  };\n\n  const handleSearchChange = (event) => {\n    setSearchTerm(event.target.value);\n    setPage(1);\n  };\n\n  const handleLoadMore = () => {\n    if (hasMore && !loading) {\n      loadFriends(page + 1);\n    }\n  };\n\n  const openMenu = (event, friend) => {\n    event.stopPropagation();\n    setAnchorEl(event.currentTarget);\n    setSelectedFriend(friend);\n  };\n\n  const closeMenu = () => {\n    setAnchorEl(null);\n    setSelectedFriend(null);\n  };\n\n  const toggleFriendSelection = (friendId) => {\n    setSelectedFriends(prev => \n      prev.includes(friendId)\n        ? prev.filter(id => id !== friendId)\n        : [...prev, friendId]\n    );\n  };\n\n  const selectAllFriends = () => {\n    setSelectedFriends(friends.map(friend => friend._id));\n  };\n\n  const clearSelection = () => {\n    setSelectedFriends([]);\n    setIsSelectionMode(false);\n  };\n\n  const getOnlineStatus = (friend) => {\n    if (friend.isOnline) {\n      return 'অনলাইন';\n    }\n    \n    if (friend.lastSeen) {\n      const lastSeen = new Date(friend.lastSeen);\n      const now = new Date();\n      const diffInHours = Math.floor((now - lastSeen) / (1000 * 60 * 60));\n      \n      if (diffInHours < 1) {\n        return 'একটু আগে';\n      } else if (diffInHours < 24) {\n        return `${diffInHours} ঘন্টা আগে`;\n      } else {\n        return lastSeen.toLocaleDateString('bn-BD');\n      }\n    }\n    \n    return 'অফলাইন';\n  };\n\n  const renderFriendCard = (friend) => {\n    const isSelected = selectedFriends.includes(friend._id);\n    \n    return (\n      <Card \n        key={friend._id} \n        sx={{ \n          mb: 2,\n          cursor: isSelectionMode ? 'pointer' : 'default',\n          bgcolor: isSelected ? 'action.selected' : 'background.paper'\n        }}\n        onClick={() => isSelectionMode && toggleFriendSelection(friend._id)}\n      >\n        <CardContent>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Box position=\"relative\">\n                <Avatar\n                  src={friend.avatar}\n                  sx={{ width: 60, height: 60 }}\n                >\n                  {friend.name?.charAt(0)}\n                </Avatar>\n                {friend.isOnline && (\n                  <Box\n                    position=\"absolute\"\n                    bottom={2}\n                    right={2}\n                    width={16}\n                    height={16}\n                    bgcolor=\"success.main\"\n                    borderRadius=\"50%\"\n                    border={2}\n                    borderColor=\"background.paper\"\n                  />\n                )}\n                {isSelectionMode && (\n                  <Box\n                    position=\"absolute\"\n                    top={-8}\n                    right={-8}\n                    bgcolor=\"background.paper\"\n                    borderRadius=\"50%\"\n                  >\n                    {isSelected ? (\n                      <CheckCircle color=\"primary\" />\n                    ) : (\n                      <RadioButtonUnchecked color=\"action\" />\n                    )}\n                  </Box>\n                )}\n              </Box>\n            </Grid>\n            <Grid item xs>\n              <Typography variant=\"h6\" gutterBottom>\n                {friend.name}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                {friend.bio || 'কোনো বায়ো নেই'}\n              </Typography>\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                <Chip\n                  size=\"small\"\n                  label={getOnlineStatus(friend)}\n                  color={friend.isOnline ? 'success' : 'default'}\n                  variant=\"outlined\"\n                />\n              </Box>\n            </Grid>\n            <Grid item>\n              {!isSelectionMode && (\n                <Box display=\"flex\" gap={1}>\n                  <IconButton \n                    color=\"primary\"\n                    title=\"মেসেজ পাঠান\"\n                    onClick={() => {/* Navigate to chat */}}\n                  >\n                    <Message />\n                  </IconButton>\n                  <IconButton \n                    color=\"primary\"\n                    title=\"ভয়েস কল\"\n                    onClick={() => {/* Start voice call */}}\n                  >\n                    <Phone />\n                  </IconButton>\n                  <IconButton \n                    color=\"primary\"\n                    title=\"ভিডিও কল\"\n                    onClick={() => {/* Start video call */}}\n                  >\n                    <VideoCall />\n                  </IconButton>\n                  <IconButton\n                    onClick={(e) => openMenu(e, friend)}\n                  >\n                    <MoreVert />\n                  </IconButton>\n                </Box>\n              )}\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <Box p={3}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Box display=\"flex\" alignItems=\"center\" gap={2}>\n          <People fontSize=\"large\" color=\"primary\" />\n          <Typography variant=\"h4\">\n            বন্ধু তালিকা ({friends.length})\n          </Typography>\n        </Box>\n        <Box display=\"flex\" gap={1}>\n          {isSelectionMode ? (\n            <>\n              <Button\n                variant=\"outlined\"\n                onClick={selectAllFriends}\n                disabled={selectedFriends.length === friends.length}\n              >\n                সব নির্বাচন\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={clearSelection}\n              >\n                বাতিল\n              </Button>\n            </>\n          ) : (\n            <Button\n              variant=\"outlined\"\n              onClick={() => setIsSelectionMode(true)}\n              disabled={friends.length === 0}\n            >\n              নির্বাচন মোড\n            </Button>\n          )}\n        </Box>\n      </Box>\n\n      {message && (\n        <Alert \n          severity=\"info\" \n          sx={{ mb: 2 }}\n          onClose={() => setMessage('')}\n        >\n          {message}\n        </Alert>\n      )}\n\n      {isSelectionMode && selectedFriends.length > 0 && (\n        <Alert severity=\"info\" sx={{ mb: 2 }}>\n          {selectedFriends.length} জন বন্ধু নির্বাচিত\n        </Alert>\n      )}\n\n      {/* Search */}\n      <TextField\n        fullWidth\n        placeholder=\"বন্ধুদের খুঁজুন...\"\n        value={searchTerm}\n        onChange={handleSearchChange}\n        sx={{ mb: 3 }}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <Search />\n            </InputAdornment>\n          ),\n          endAdornment: searchTerm && (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={() => setSearchTerm('')}>\n                <Close />\n              </IconButton>\n            </InputAdornment>\n          )\n        }}\n      />\n\n      {/* Friends List */}\n      {loading && friends.length === 0 ? (\n        <Box display=\"flex\" justifyContent=\"center\" p={4}>\n          <CircularProgress />\n        </Box>\n      ) : (\n        <>\n          {friends.length === 0 ? (\n            <Card>\n              <CardContent>\n                <Box textAlign=\"center\" py={4}>\n                  <People sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n                  <Typography variant=\"h6\" color=\"text.secondary\">\n                    {searchTerm ? 'কোনো বন্ধু খুঁজে পাওয়া যায়নি' : 'আপনার কোনো বন্ধু নেই'}\n                  </Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          ) : (\n            friends.map(friend => renderFriendCard(friend))\n          )}\n\n          {hasMore && friends.length > 0 && (\n            <Box textAlign=\"center\" mt={2}>\n              <Button\n                variant=\"outlined\"\n                onClick={handleLoadMore}\n                disabled={loading}\n              >\n                {loading ? <CircularProgress size={20} /> : 'আরো লোড করুন'}\n              </Button>\n            </Box>\n          )}\n        </>\n      )}\n\n      {/* Friend Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={closeMenu}\n      >\n        <MenuItem onClick={() => {\n          /* Navigate to profile */\n          closeMenu();\n        }}>\n          প্রোফাইল দেখুন\n        </MenuItem>\n        <MenuItem onClick={() => {\n          /* Navigate to chat */\n          closeMenu();\n        }}>\n          <Message sx={{ mr: 1 }} />\n          মেসেজ পাঠান\n        </MenuItem>\n        <Divider />\n        <MenuItem onClick={() => {\n          handleRestrictUser(selectedFriend._id);\n        }}>\n          রেস্ট্রিক্ট করুন\n        </MenuItem>\n        <MenuItem \n          onClick={() => {\n            setConfirmDialog({\n              type: 'remove',\n              title: 'বন্ধু সরান',\n              message: `আপনি কি নিশ্চিত যে ${selectedFriend.name} কে বন্ধু তালিকা থেকে সরাতে চান?`,\n              action: () => handleRemoveFriend(selectedFriend._id)\n            });\n            closeMenu();\n          }}\n          sx={{ color: 'warning.main' }}\n        >\n          <PersonRemove sx={{ mr: 1 }} />\n          বন্ধু সরান\n        </MenuItem>\n        <MenuItem \n          onClick={() => {\n            setConfirmDialog({\n              type: 'block',\n              title: 'ব্যবহারকারী ব্লক করুন',\n              message: `আপনি কি নিশ্চিত যে ${selectedFriend.name} কে ব্লক করতে চান?`,\n              action: () => handleBlockUser(selectedFriend._id)\n            });\n            closeMenu();\n          }}\n          sx={{ color: 'error.main' }}\n        >\n          <Block sx={{ mr: 1 }} />\n          ব্লক করুন\n        </MenuItem>\n        <MenuItem \n          onClick={() => {\n            /* Report user */\n            closeMenu();\n          }}\n          sx={{ color: 'error.main' }}\n        >\n          <Report sx={{ mr: 1 }} />\n          রিপোর্ট করুন\n        </MenuItem>\n      </Menu>\n\n      {/* Confirmation Dialog */}\n      <Dialog\n        open={Boolean(confirmDialog)}\n        onClose={() => setConfirmDialog(null)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          {confirmDialog?.title}\n        </DialogTitle>\n        <DialogContent>\n          <Typography>\n            {confirmDialog?.message}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setConfirmDialog(null)}>\n            বাতিল\n          </Button>\n          <Button\n            variant=\"contained\"\n            color={confirmDialog?.type === 'block' ? 'error' : 'warning'}\n            onClick={confirmDialog?.action}\n          >\n            নিশ্চিত\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default FriendsList;