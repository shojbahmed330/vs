import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Button,\n  Divider,\n  Grid,\n  Alert,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  Avatar,\n  IconButton,\n  TextField,\n  Chip,\n  CircularProgress\n} from '@mui/material';\nimport {\n  Security,\n  Visibility,\n  Public,\n  People,\n  Lock,\n  Block,\n  Add,\n  Delete,\n  Edit,\n  Save,\n  Cancel\n} from '@mui/icons-material';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { privacyAPI } from '../../api/friends';\n\nconst PrivacySettings = () => {\n  const { user } = useAuth();\n  const [settings, setSettings] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [message, setMessage] = useState('');\n  const [blockedUsers, setBlockedUsers] = useState([]);\n  const [showBlockedUsers, setShowBlockedUsers] = useState(false);\n  const [newListDialog, setNewListDialog] = useState(false);\n  const [newListName, setNewListName] = useState('');\n  const [editingList, setEditingList] = useState(null);\n\n  useEffect(() => {\n    loadPrivacySettings();\n    loadBlockedUsers();\n  }, []);\n\n  const loadPrivacySettings = async () => {\n    try {\n      setLoading(true);\n      const data = await privacyAPI.getPrivacySettings();\n      setSettings(data.privacySettings || getDefaultSettings());\n    } catch (error) {\n      setMessage('প্রাইভেসি সেটিংস লোড করতে সমস্যা হয়েছে');\n      setSettings(getDefaultSettings());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadBlockedUsers = async () => {\n    try {\n      const data = await privacyAPI.getBlockedUsers();\n      setBlockedUsers(data.blockedUsers || []);\n    } catch (error) {\n      console.error('Error loading blocked users:', error);\n    }\n  };\n\n  const getDefaultSettings = () => ({\n    postVisibility: {\n      default: 'friends',\n      allowComments: 'friends',\n      allowShares: 'friends',\n      allowReactions: 'friends'\n    },\n    profileVisibility: {\n      basicInfo: 'friends',\n      contactInfo: 'friends',\n      friendsList: 'friends',\n      photos: 'friends',\n      stories: 'friends'\n    },\n    friendRequests: {\n      whoCanSend: 'everyone',\n      whoCanSeeList: 'friends'\n    },\n    messaging: {\n      whoCanMessage: 'friends',\n      messageRequests: true\n    },\n    searchability: {\n      findByEmail: 'friends',\n      findByPhone: 'friends',\n      searchEngines: false\n    },\n    activityStatus: {\n      showOnlineStatus: true,\n      showLastSeen: 'friends'\n    },\n    customLists: [],\n    notifications: {\n      email: {\n        friendRequests: true,\n        messages: true,\n        posts: true,\n        comments: true,\n        likes: false,\n        mentions: true\n      },\n      push: {\n        friendRequests: true,\n        messages: true,\n        posts: false,\n        comments: true,\n        likes: false,\n        mentions: true\n      }\n    }\n  });\n\n  const handleSettingChange = (section, field, value) => {\n    setSettings(prev => ({\n      ...prev,\n      [section]: {\n        ...prev[section],\n        [field]: value\n      }\n    }));\n  };\n\n  const handleNestedSettingChange = (section, subsection, field, value) => {\n    setSettings(prev => ({\n      ...prev,\n      [section]: {\n        ...prev[section],\n        [subsection]: {\n          ...prev[section][subsection],\n          [field]: value\n        }\n      }\n    }));\n  };\n\n  const handleSaveSettings = async () => {\n    try {\n      setSaving(true);\n      await privacyAPI.updatePrivacySettings(settings);\n      setMessage('প্রাইভেসি সেটিংস সফলভাবে আপডেট করা হয়েছে');\n    } catch (error) {\n      setMessage('সেটিংস আপডেট করতে সমস্যা হয়েছে');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleUnblockUser = async (userId) => {\n    try {\n      await privacyAPI.unblockUser(userId);\n      setBlockedUsers(prev => prev.filter(blocked => blocked.user._id !== userId));\n      setMessage('ব্যবহারকারী আনব্লক করা হয়েছে');\n    } catch (error) {\n      setMessage('আনব্লক করতে সমস্যা হয়েছে');\n    }\n  };\n\n  const handleCreateCustomList = async () => {\n    try {\n      if (!newListName.trim()) return;\n      \n      await privacyAPI.createCustomList(newListName.trim());\n      setMessage('কাস্টম তালিকা তৈরি করা হয়েছে');\n      setNewListDialog(false);\n      setNewListName('');\n      loadPrivacySettings();\n    } catch (error) {\n      setMessage('তালিকা তৈরি করতে সমস্যা হয়েছে');\n    }\n  };\n\n  const handleDeleteCustomList = async (listId) => {\n    try {\n      await privacyAPI.deleteCustomList(listId);\n      setMessage('কাস্টম তালিকা ডিলিট করা হয়েছে');\n      loadPrivacySettings();\n    } catch (error) {\n      setMessage('তালিকা ডিলিট করতে সমস্যা হয়েছে');\n    }\n  };\n\n  const visibilityOptions = [\n    { value: 'public', label: 'সবাই', icon: <Public /> },\n    { value: 'friends', label: 'বন্ধুরা', icon: <People /> },\n    { value: 'only_me', label: 'শুধু আমি', icon: <Lock /> }\n  ];\n\n  const friendRequestOptions = [\n    { value: 'everyone', label: 'সবাই' },\n    { value: 'friends_of_friends', label: 'বন্ধুদের বন্ধুরা' },\n    { value: 'no_one', label: 'কেউ না' }\n  ];\n\n  const messagingOptions = [\n    { value: 'everyone', label: 'সবাই' },\n    { value: 'friends', label: 'বন্ধুরা' },\n    { value: 'no_one', label: 'কেউ না' }\n  ];\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" p={4}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box p={3}>\n      <Box display=\"flex\" alignItems=\"center\" gap={2} mb={3}>\n        <Security fontSize=\"large\" color=\"primary\" />\n        <Typography variant=\"h4\">\n          প্রাইভেসি সেটিংস\n        </Typography>\n      </Box>\n\n      {message && (\n        <Alert \n          severity=\"info\" \n          sx={{ mb: 2 }}\n          onClose={() => setMessage('')}\n        >\n          {message}\n        </Alert>\n      )}\n\n      <Grid container spacing={3}>\n        {/* Post Privacy Settings */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                পোস্ট প্রাইভেসি\n              </Typography>\n              <Box space={2}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>ডিফল্ট পোস্ট দৃশ্যমানতা</InputLabel>\n                  <Select\n                    value={settings?.postVisibility?.default || 'friends'}\n                    onChange={(e) => handleSettingChange('postVisibility', 'default', e.target.value)}\n                  >\n                    {visibilityOptions.map(option => (\n                      <MenuItem key={option.value} value={option.value}>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          {option.icon}\n                          {option.label}\n                        </Box>\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>কে কমেন্ট করতে পারবে</InputLabel>\n                  <Select\n                    value={settings?.postVisibility?.allowComments || 'friends'}\n                    onChange={(e) => handleSettingChange('postVisibility', 'allowComments', e.target.value)}\n                  >\n                    {messagingOptions.map(option => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>কে শেয়ার করতে পারবে</InputLabel>\n                  <Select\n                    value={settings?.postVisibility?.allowShares || 'friends'}\n                    onChange={(e) => handleSettingChange('postVisibility', 'allowShares', e.target.value)}\n                  >\n                    {messagingOptions.map(option => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Profile Privacy Settings */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                প্রোফাইল প্রাইভেসি\n              </Typography>\n              <Box space={2}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>মৌলিক তথ্য</InputLabel>\n                  <Select\n                    value={settings?.profileVisibility?.basicInfo || 'friends'}\n                    onChange={(e) => handleSettingChange('profileVisibility', 'basicInfo', e.target.value)}\n                  >\n                    {visibilityOptions.map(option => (\n                      <MenuItem key={option.value} value={option.value}>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          {option.icon}\n                          {option.label}\n                        </Box>\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>যোগাযোগের তথ্য</InputLabel>\n                  <Select\n                    value={settings?.profileVisibility?.contactInfo || 'friends'}\n                    onChange={(e) => handleSettingChange('profileVisibility', 'contactInfo', e.target.value)}\n                  >\n                    {visibilityOptions.map(option => (\n                      <MenuItem key={option.value} value={option.value}>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          {option.icon}\n                          {option.label}\n                        </Box>\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>বন্ধু তালিকা</InputLabel>\n                  <Select\n                    value={settings?.profileVisibility?.friendsList || 'friends'}\n                    onChange={(e) => handleSettingChange('profileVisibility', 'friendsList', e.target.value)}\n                  >\n                    {visibilityOptions.map(option => (\n                      <MenuItem key={option.value} value={option.value}>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          {option.icon}\n                          {option.label}\n                        </Box>\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Friend Requests Settings */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                বন্ধু অনুরোধ সেটিংস\n              </Typography>\n              <Box space={2}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>কে বন্ধু অনুরোধ পাঠাতে পারবে</InputLabel>\n                  <Select\n                    value={settings?.friendRequests?.whoCanSend || 'everyone'}\n                    onChange={(e) => handleSettingChange('friendRequests', 'whoCanSend', e.target.value)}\n                  >\n                    {friendRequestOptions.map(option => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>কে বন্ধু তালিকা দেখতে পারবে</InputLabel>\n                  <Select\n                    value={settings?.friendRequests?.whoCanSeeList || 'friends'}\n                    onChange={(e) => handleSettingChange('friendRequests', 'whoCanSeeList', e.target.value)}\n                  >\n                    {visibilityOptions.map(option => (\n                      <MenuItem key={option.value} value={option.value}>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          {option.icon}\n                          {option.label}\n                        </Box>\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Messaging Settings */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                মেসেজিং সেটিংস\n              </Typography>\n              <Box space={2}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>কে মেসেজ পাঠাতে পারবে</InputLabel>\n                  <Select\n                    value={settings?.messaging?.whoCanMessage || 'friends'}\n                    onChange={(e) => handleSettingChange('messaging', 'whoCanMessage', e.target.value)}\n                  >\n                    {messagingOptions.map(option => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={settings?.messaging?.messageRequests || true}\n                      onChange={(e) => handleSettingChange('messaging', 'messageRequests', e.target.checked)}\n                    />\n                  }\n                  label=\"মেসেজ অনুরোধ গ্রহণ করুন\"\n                />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Activity Status Settings */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                কার্যকলাপ স্ট্যাটাস\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={settings?.activityStatus?.showOnlineStatus || true}\n                        onChange={(e) => handleSettingChange('activityStatus', 'showOnlineStatus', e.target.checked)}\n                      />\n                    }\n                    label=\"অনলাইন স্ট্যাটাস দেখান\"\n                  />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <FormControl fullWidth>\n                    <InputLabel>কে শেষ দেখা সময় দেখতে পারবে</InputLabel>\n                    <Select\n                      value={settings?.activityStatus?.showLastSeen || 'friends'}\n                      onChange={(e) => handleSettingChange('activityStatus', 'showLastSeen', e.target.value)}\n                    >\n                      {messagingOptions.map(option => (\n                        <MenuItem key={option.value} value={option.value}>\n                          {option.label}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Blocked Users */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">\n                  ব্লক করা ব্যবহারকারী ({blockedUsers.length})\n                </Typography>\n                <Button\n                  variant=\"outlined\"\n                  onClick={() => setShowBlockedUsers(!showBlockedUsers)}\n                >\n                  {showBlockedUsers ? 'লুকান' : 'দেখান'}\n                </Button>\n              </Box>\n              \n              {showBlockedUsers && (\n                <List>\n                  {blockedUsers.length === 0 ? (\n                    <Typography color=\"text.secondary\" textAlign=\"center\" py={2}>\n                      কোনো ব্যবহারকারী ব্লক করা নেই\n                    </Typography>\n                  ) : (\n                    blockedUsers.map(blocked => (\n                      <ListItem key={blocked.user._id}>\n                        <ListItemAvatar>\n                          <Avatar src={blocked.user.avatar}>\n                            {blocked.user.name?.charAt(0)}\n                          </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary={blocked.user.name}\n                          secondary={`ব্লক করা হয়েছে: ${new Date(blocked.blockedAt).toLocaleDateString('bn-BD')}`}\n                        />\n                        <ListItemSecondaryAction>\n                          <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            onClick={() => handleUnblockUser(blocked.user._id)}\n                          >\n                            আনব্লক\n                          </Button>\n                        </ListItemSecondaryAction>\n                      </ListItem>\n                    ))\n                  )}\n                </List>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Save Button */}\n      <Box mt={3} textAlign=\"center\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          startIcon={saving ? <CircularProgress size={20} /> : <Save />}\n          onClick={handleSaveSettings}\n          disabled={saving}\n        >\n          {saving ? 'সেভ করা হচ্ছে...' : 'সেটিংস সেভ করুন'}\n        </Button>\n      </Box>\n\n      {/* New Custom List Dialog */}\n      <Dialog\n        open={newListDialog}\n        onClose={() => setNewListDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          নতুন কাস্টম তালিকা তৈরি করুন\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            label=\"তালিকার নাম\"\n            value={newListName}\n            onChange={(e) => setNewListName(e.target.value)}\n            margin=\"normal\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setNewListDialog(false)}>\n            বাতিল\n          </Button>\n          <Button \n            variant=\"contained\" \n            onClick={handleCreateCustomList}\n            disabled={!newListName.trim()}\n          >\n            তৈরি করুন\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default PrivacySettings;