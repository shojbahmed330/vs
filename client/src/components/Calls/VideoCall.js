import React, { useEffect, useRef, useState } from 'react';\nimport {\n  Box,\n  IconButton,\n  Typography,\n  Avatar,\n  Card,\n  CardContent,\n  Dialog,\n  Fab,\n  Tooltip,\n  Paper,\n  Grid,\n  Chip\n} from '@mui/material';\nimport {\n  CallEnd,\n  Mic,\n  MicOff,\n  Videocam,\n  VideocamOff,\n  VolumeUp,\n  VolumeOff,\n  Fullscreen,\n  FullscreenExit,\n  CameraSwitch,\n  Settings,\n  ScreenShare,\n  StopScreenShare\n} from '@mui/icons-material';\nimport { useAgora } from '../../contexts/AgoraContext';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nconst VideoCall = ({ isOpen, onClose, callData }) => {\n  const {\n    localTracks,\n    remoteUsers,\n    isCallActive,\n    callMode,\n    endCall,\n    toggleMicrophone,\n    toggleCamera,\n    switchCamera\n  } = useAgora();\n\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOn, setIsSpeakerOn] = useState(true);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [networkQuality, setNetworkQuality] = useState('good');\n\n  const localVideoRef = useRef(null);\n  const remoteVideoRefs = useRef({});\n  const callStartTime = useRef(Date.now());\n\n  // Call duration timer\n  useEffect(() => {\n    if (isCallActive) {\n      const timer = setInterval(() => {\n        setCallDuration(Math.floor((Date.now() - callStartTime.current) / 1000));\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [isCallActive]);\n\n  // Play local video\n  useEffect(() => {\n    if (localTracks.video && localVideoRef.current) {\n      localTracks.video.play(localVideoRef.current);\n    }\n  }, [localTracks.video]);\n\n  // Play remote videos\n  useEffect(() => {\n    Object.keys(remoteUsers).forEach(uid => {\n      const user = remoteUsers[uid];\n      if (user.video && remoteVideoRefs.current[uid]) {\n        user.video.play(remoteVideoRefs.current[uid]);\n      }\n    });\n  }, [remoteUsers]);\n\n  const formatDuration = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const handleMuteToggle = async () => {\n    await toggleMicrophone();\n    setIsMuted(!isMuted);\n  };\n\n  const handleVideoToggle = async () => {\n    await toggleCamera();\n    setIsVideoOff(!isVideoOff);\n  };\n\n  const handleSpeakerToggle = () => {\n    setIsSpeakerOn(!isSpeakerOn);\n    // In a real implementation, this would control audio output\n  };\n\n  const handleEndCall = async () => {\n    await endCall();\n    onClose();\n  };\n\n  const handleFullscreenToggle = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n      setIsFullscreen(true);\n    } else {\n      document.exitFullscreen();\n      setIsFullscreen(false);\n    }\n  };\n\n  const handleScreenShare = async () => {\n    // Screen sharing implementation would go here\n    setIsScreenSharing(!isScreenSharing);\n  };\n\n  const getNetworkQualityColor = (quality) => {\n    switch (quality) {\n      case 'excellent': return 'success';\n      case 'good': return 'info';\n      case 'poor': return 'warning';\n      case 'bad': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const remoteUserIds = Object.keys(remoteUsers);\n  const hasRemoteVideo = remoteUserIds.some(uid => remoteUsers[uid].video);\n\n  return (\n    <Dialog \n      open={isOpen} \n      onClose={onClose}\n      maxWidth={false}\n      fullScreen\n      PaperProps={{\n        sx: {\n          bgcolor: 'grey.900',\n          color: 'white'\n        }\n      }}\n    >\n      <Box sx={{ \n        height: '100vh', \n        width: '100vw', \n        position: 'relative',\n        bgcolor: 'grey.900',\n        overflow: 'hidden'\n      }}>\n        \n        {/* Header with call info */}\n        <Box sx={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          zIndex: 10,\n          p: 2,\n          background: 'linear-gradient(180deg, rgba(0,0,0,0.7) 0%, transparent 100%)'\n        }}>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Box display=\"flex\" alignItems=\"center\" gap={2}>\n              <Avatar \n                src={callData?.otherUser?.avatar} \n                sx={{ width: 40, height: 40 }}\n              >\n                {callData?.otherUser?.fullName?.[0]}\n              </Avatar>\n              <Box>\n                <Typography variant=\"h6\">\n                  {callData?.otherUser?.fullName || 'Unknown User'}\n                </Typography>\n                <Typography variant=\"body2\" color=\"grey.300\">\n                  {isCallActive ? formatDuration(callDuration) : 'সংযোগ হচ্ছে...'}\n                </Typography>\n              </Box>\n            </Box>\n            \n            <Box display=\"flex\" alignItems=\"center\" gap={1}>\n              <Chip \n                label={networkQuality} \n                color={getNetworkQualityColor(networkQuality)}\n                size=\"small\"\n              />\n              <Chip \n                label={callMode === 'video' ? 'ভিডিও' : 'অডিও'} \n                color=\"primary\"\n                size=\"small\"\n              />\n            </Box>\n          </Box>\n        </Box>\n\n        {/* Video containers */}\n        <Box sx={{ height: '100%', position: 'relative' }}>\n          \n          {/* Remote video (main) */}\n          {callMode === 'video' && hasRemoteVideo ? (\n            <Box sx={{ \n              position: 'absolute',\n              top: 0,\n              left: 0,\n              right: 0,\n              bottom: 0\n            }}>\n              {remoteUserIds.map(uid => \n                remoteUsers[uid].video ? (\n                  <motion.div\n                    key={uid}\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    style={{ width: '100%', height: '100%' }}\n                  >\n                    <video\n                      ref={el => remoteVideoRefs.current[uid] = el}\n                      style={{\n                        width: '100%',\n                        height: '100%',\n                        objectFit: 'cover'\n                      }}\n                      autoPlay\n                      playsInline\n                    />\n                  </motion.div>\n                ) : null\n              )}\n            </Box>\n          ) : (\n            // Audio call or no remote video\n            <Box sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: '100%',\n              flexDirection: 'column',\n              gap: 3\n            }}>\n              <Avatar \n                src={callData?.otherUser?.avatar}\n                sx={{ \n                  width: 150, \n                  height: 150,\n                  fontSize: '4rem'\n                }}\n              >\n                {callData?.otherUser?.fullName?.[0]}\n              </Avatar>\n              <Typography variant=\"h4\">\n                {callData?.otherUser?.fullName}\n              </Typography>\n              <Typography variant=\"h6\" color=\"grey.400\">\n                {callMode === 'video' ? 'ভিডিও বন্ধ' : 'অডিও কল'}\n              </Typography>\n            </Box>\n          )}\n\n          {/* Local video (picture-in-picture) */}\n          {callMode === 'video' && localTracks.video && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              style={{\n                position: 'absolute',\n                top: 80,\n                right: 20,\n                width: 150,\n                height: 200,\n                borderRadius: 12,\n                overflow: 'hidden',\n                border: '2px solid white',\n                zIndex: 5\n              }}\n            >\n              <video\n                ref={localVideoRef}\n                style={{\n                  width: '100%',\n                  height: '100%',\n                  objectFit: 'cover',\n                  transform: 'scaleX(-1)' // Mirror effect\n                }}\n                autoPlay\n                playsInline\n                muted\n              />\n              {isVideoOff && (\n                <Box sx={{\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  right: 0,\n                  bottom: 0,\n                  bgcolor: 'grey.800',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center'\n                }}>\n                  <VideocamOff fontSize=\"large\" />\n                </Box>\n              )}\n            </motion.div>\n          )}\n        </Box>\n\n        {/* Control buttons */}\n        <Box sx={{\n          position: 'absolute',\n          bottom: 0,\n          left: 0,\n          right: 0,\n          p: 3,\n          background: 'linear-gradient(0deg, rgba(0,0,0,0.8) 0%, transparent 100%)'\n        }}>\n          <Box display=\"flex\" justifyContent=\"center\" gap={2}>\n            \n            {/* Microphone toggle */}\n            <Tooltip title={isMuted ? 'মাইক চালু করুন' : 'মাইক বন্ধ করুন'}>\n              <Fab\n                color={isMuted ? 'error' : 'default'}\n                onClick={handleMuteToggle}\n                sx={{ bgcolor: isMuted ? 'error.main' : 'grey.700' }}\n              >\n                {isMuted ? <MicOff /> : <Mic />}\n              </Fab>\n            </Tooltip>\n\n            {/* Video toggle (only for video calls) */}\n            {callMode === 'video' && (\n              <Tooltip title={isVideoOff ? 'ভিডিও চালু করুন' : 'ভিডিও বন্ধ করুন'}>\n                <Fab\n                  color={isVideoOff ? 'error' : 'default'}\n                  onClick={handleVideoToggle}\n                  sx={{ bgcolor: isVideoOff ? 'error.main' : 'grey.700' }}\n                >\n                  {isVideoOff ? <VideocamOff /> : <Videocam />}\n                </Fab>\n              </Tooltip>\n            )}\n\n            {/* Speaker toggle */}\n            <Tooltip title={isSpeakerOn ? 'স্পিকার বন্ধ করুন' : 'স্পিকার চালু করুন'}>\n              <Fab\n                color=\"default\"\n                onClick={handleSpeakerToggle}\n                sx={{ bgcolor: 'grey.700' }}\n              >\n                {isSpeakerOn ? <VolumeUp /> : <VolumeOff />}\n              </Fab>\n            </Tooltip>\n\n            {/* Camera switch (only for video calls) */}\n            {callMode === 'video' && (\n              <Tooltip title=\"ক্যামেরা পরিবর্তন করুন\">\n                <Fab\n                  color=\"default\"\n                  onClick={switchCamera}\n                  sx={{ bgcolor: 'grey.700' }}\n                >\n                  <CameraSwitch />\n                </Fab>\n              </Tooltip>\n            )}\n\n            {/* End call */}\n            <Tooltip title=\"কল শেষ করুন\">\n              <Fab\n                color=\"error\"\n                onClick={handleEndCall}\n                size=\"large\"\n                sx={{ mx: 2 }}\n              >\n                <CallEnd />\n              </Fab>\n            </Tooltip>\n\n            {/* Fullscreen toggle */}\n            <Tooltip title={isFullscreen ? 'ফুলস্ক্রিন ছাড়ুন' : 'ফুলস্ক্রিন করুন'}>\n              <Fab\n                color=\"default\"\n                onClick={handleFullscreenToggle}\n                sx={{ bgcolor: 'grey.700' }}\n              >\n                {isFullscreen ? <FullscreenExit /> : <Fullscreen />}\n              </Fab>\n            </Tooltip>\n\n            {/* Screen share (for future implementation) */}\n            <Tooltip title={isScreenSharing ? 'স্ক্রিন শেয়ার বন্ধ করুন' : 'স্ক্রিন শেয়ার করুন'}>\n              <Fab\n                color={isScreenSharing ? 'primary' : 'default'}\n                onClick={handleScreenShare}\n                sx={{ bgcolor: isScreenSharing ? 'primary.main' : 'grey.700' }}\n              >\n                {isScreenSharing ? <StopScreenShare /> : <ScreenShare />}\n              </Fab>\n            </Tooltip>\n\n          </Box>\n        </Box>\n\n        {/* Connection quality indicator */}\n        <Box sx={{\n          position: 'absolute',\n          top: 80,\n          left: 20,\n          zIndex: 10\n        }}>\n          <Paper sx={{ p: 1, bgcolor: 'rgba(0,0,0,0.7)' }}>\n            <Typography variant=\"caption\" color=\"white\">\n              নেটওয়ার্ক: {networkQuality}\n            </Typography>\n          </Paper>\n        </Box>\n      </Box>\n    </Dialog>\n  );\n};\n\nexport default VideoCall;