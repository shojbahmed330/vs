import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  Avatar,\n  IconButton,\n  Typography,\n  Chip,\n  Paper,\n  Divider,\n  Menu,\n  MenuItem,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Tab,\n  Tabs,\n  Badge\n} from '@mui/material';\nimport {\n  Call,\n  Videocam,\n  CallMade,\n  CallReceived,\n  CallMissed,\n  MoreVert,\n  Delete,\n  Info,\n  PersonAdd,\n  Block,\n  Schedule\n} from '@mui/icons-material';\nimport { useAgora } from '../../contexts/AgoraContext';\nimport { format, isToday, isYesterday, formatDistance } from 'date-fns';\nimport { bn } from 'date-fns/locale';\nimport axios from 'axios';\n\nconst CallHistory = () => {\n  const { startCall } = useAgora();\n  const [calls, setCalls] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedTab, setSelectedTab] = useState(0); // 0: All, 1: Missed, 2: Outgoing, 3: Incoming\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedCall, setSelectedCall] = useState(null);\n  const [showCallDetails, setShowCallDetails] = useState(false);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    fetchCallHistory();\n  }, [page]);\n\n  const fetchCallHistory = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`/api/calls/history?page=${page}&limit=50`);\n      setCalls(response.data.calls);\n    } catch (error) {\n      console.error('Error fetching call history:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCallTime = (date) => {\n    const callDate = new Date(date);\n    \n    if (isToday(callDate)) {\n      return format(callDate, 'HH:mm');\n    } else if (isYesterday(callDate)) {\n      return 'গতকাল';\n    } else {\n      return format(callDate, 'dd/MM/yyyy');\n    }\n  };\n\n  const formatDuration = (seconds) => {\n    if (!seconds || seconds === 0) return '';\n    \n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getCallIcon = (call, userId) => {\n    const direction = call.getDirectionForUser?.(userId) || \n      (call.caller._id === userId ? 'outgoing' : 'incoming');\n    \n    if (call.status === 'missed') {\n      return <CallMissed color=\"error\" />;\n    } else if (direction === 'outgoing') {\n      return call.callType === 'video' ? \n        <Videocam color=\"primary\" /> : \n        <CallMade color=\"success\" />;\n    } else {\n      return call.callType === 'video' ? \n        <Videocam color=\"primary\" /> : \n        <CallReceived color=\"info\" />;\n    }\n  };\n\n  const getCallStatusText = (call, userId) => {\n    const direction = call.caller._id === userId ? 'outgoing' : 'incoming';\n    \n    switch (call.status) {\n      case 'missed':\n        return direction === 'outgoing' ? 'উত্তর দেয়নি' : 'মিসড কল';\n      case 'rejected':\n        return direction === 'outgoing' ? 'প্রত্যাখ্যাত' : 'প্রত্যাখ্যান করেছেন';\n      case 'ended':\n        return call.duration ? formatDuration(call.duration) : 'কল শেষ';\n      case 'active':\n        return 'চলমান';\n      default:\n        return call.status;\n    }\n  };\n\n  const getOtherUser = (call, userId) => {\n    return call.caller._id === userId ? call.receiver : call.caller;\n  };\n\n  const filteredCalls = calls.filter(call => {\n    const userId = 'current-user-id'; // Get from auth context\n    \n    switch (selectedTab) {\n      case 1: // Missed\n        return call.status === 'missed';\n      case 2: // Outgoing\n        return call.caller._id === userId;\n      case 3: // Incoming\n        return call.receiver._id === userId;\n      default: // All\n        return true;\n    }\n  });\n\n  const handleMenuOpen = (event, call) => {\n    setAnchorEl(event.currentTarget);\n    setSelectedCall(call);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    setSelectedCall(null);\n  };\n\n  const handleCallUser = async (user, isVideo = false) => {\n    try {\n      await startCall(user._id, isVideo);\n    } catch (error) {\n      console.error('Error starting call:', error);\n    }\n  };\n\n  const handleDeleteCall = async (callId) => {\n    try {\n      await axios.delete(`/api/calls/${callId}`);\n      setCalls(calls.filter(call => call._id !== callId));\n      handleMenuClose();\n    } catch (error) {\n      console.error('Error deleting call:', error);\n    }\n  };\n\n  const handleShowDetails = () => {\n    setShowCallDetails(true);\n    handleMenuClose();\n  };\n\n  const getMissedCallsCount = () => {\n    return calls.filter(call => call.status === 'missed').length;\n  };\n\n  return (\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      \n      {/* Header with tabs */}\n      <Paper sx={{ mb: 1 }}>\n        <Tabs \n          value={selectedTab} \n          onChange={(e, newValue) => setSelectedTab(newValue)}\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"সব\" />\n          <Tab \n            label={\n              <Badge badgeContent={getMissedCallsCount()} color=\"error\">\n                মিসড\n              </Badge>\n            } \n          />\n          <Tab label=\"আউটগোয়িং\" />\n          <Tab label=\"ইনকামিং\" />\n        </Tabs>\n      </Paper>\n\n      {/* Call list */}\n      <Box sx={{ flex: 1, overflow: 'auto' }}>\n        {loading ? (\n          <Box sx={{ p: 3, textAlign: 'center' }}>\n            <Typography>লোড হচ্ছে...</Typography>\n          </Box>\n        ) : filteredCalls.length === 0 ? (\n          <Box sx={{ p: 3, textAlign: 'center' }}>\n            <Typography color=\"text.secondary\">\n              কোনো কল ইতিহাস নেই\n            </Typography>\n          </Box>\n        ) : (\n          <List>\n            {filteredCalls.map((call, index) => {\n              const userId = 'current-user-id'; // Get from auth context\n              const otherUser = getOtherUser(call, userId);\n              \n              return (\n                <React.Fragment key={call._id}>\n                  <ListItem\n                    button\n                    onClick={() => handleCallUser(otherUser, false)}\n                    sx={{\n                      '&:hover': {\n                        bgcolor: 'action.hover'\n                      }\n                    }}\n                  >\n                    <ListItemAvatar>\n                      <Box sx={{ position: 'relative' }}>\n                        <Avatar src={otherUser.avatar}>\n                          {otherUser.fullName?.[0] || otherUser.username?.[0]}\n                        </Avatar>\n                        <Box sx={{\n                          position: 'absolute',\n                          bottom: -2,\n                          right: -2,\n                          bgcolor: 'background.paper',\n                          borderRadius: '50%',\n                          p: 0.25\n                        }}>\n                          {getCallIcon(call, userId)}\n                        </Box>\n                      </Box>\n                    </ListItemAvatar>\n                    \n                    <ListItemText\n                      primary={\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          <Typography variant=\"subtitle1\">\n                            {otherUser.fullName || otherUser.username}\n                          </Typography>\n                          {call.callType === 'video' && (\n                            <Chip label=\"ভিডিও\" size=\"small\" color=\"primary\" />\n                          )}\n                        </Box>\n                      }\n                      secondary={\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            {getCallStatusText(call, userId)}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            • {formatCallTime(call.startTime)}\n                          </Typography>\n                        </Box>\n                      }\n                    />\n                    \n                    <ListItemSecondaryAction>\n                      <Box sx={{ display: 'flex', gap: 1 }}>\n                        <IconButton\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleCallUser(otherUser, true);\n                          }}\n                          size=\"small\"\n                        >\n                          <Videocam />\n                        </IconButton>\n                        <IconButton\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleMenuOpen(e, call);\n                          }}\n                          size=\"small\"\n                        >\n                          <MoreVert />\n                        </IconButton>\n                      </Box>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                  \n                  {index < filteredCalls.length - 1 && <Divider />}\n                </React.Fragment>\n              );\n            })}\n          </List>\n        )}\n      </Box>\n\n      {/* Context menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n      >\n        <MenuItem onClick={handleShowDetails}>\n          <Info sx={{ mr: 2 }} />\n          বিস্তারিত\n        </MenuItem>\n        <MenuItem onClick={() => handleDeleteCall(selectedCall?._id)}>\n          <Delete sx={{ mr: 2 }} />\n          মুছে ফেলুন\n        </MenuItem>\n        <MenuItem onClick={handleMenuClose}>\n          <PersonAdd sx={{ mr: 2 }} />\n          যোগাযোগে যোগ করুন\n        </MenuItem>\n        <MenuItem onClick={handleMenuClose}>\n          <Block sx={{ mr: 2 }} />\n          ব্লক করুন\n        </MenuItem>\n      </Menu>\n\n      {/* Call details dialog */}\n      <Dialog \n        open={showCallDetails} \n        onClose={() => setShowCallDetails(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>কল বিস্তারিত</DialogTitle>\n        <DialogContent>\n          {selectedCall && (\n            <Box sx={{ py: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                {getOtherUser(selectedCall, 'current-user-id').fullName}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                {selectedCall.callType === 'video' ? 'ভিডিও কল' : 'অডিও কল'}\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                স্ট্যাটাস: {getCallStatusText(selectedCall, 'current-user-id')}\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                সময়: {format(new Date(selectedCall.startTime), 'PPpp', { locale: bn })}\n              </Typography>\n              {selectedCall.duration > 0 && (\n                <Typography variant=\"body2\" gutterBottom>\n                  সময়কাল: {formatDuration(selectedCall.duration)}\n                </Typography>\n              )}\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowCallDetails(false)}>\n            বন্ধ করুন\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CallHistory;