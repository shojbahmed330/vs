import React, { useState, useEffect } from 'react';\nimport { useSocket } from '../../contexts/SocketContext';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useAgora } from '../../contexts/AgoraContext';\nimport IncomingCall from './IncomingCall';\nimport VideoCall from './VideoCall';\nimport { Snackbar, Alert } from '@mui/material';\n\nconst CallManager = () => {\n  const { socket } = useSocket();\n  const { user } = useAuth();\n  const { isCallActive, currentCallData, endCall } = useAgora();\n  \n  const [incomingCall, setIncomingCall] = useState(null);\n  const [showIncomingCall, setShowIncomingCall] = useState(false);\n  const [showVideoCall, setShowVideoCall] = useState(false);\n  const [callNotification, setCallNotification] = useState(null);\n\n  useEffect(() => {\n    if (!socket || !user) return;\n\n    // Listen for incoming calls\n    socket.on('incoming-call', (callData) => {\n      console.log('Incoming call received:', callData);\n      setIncomingCall(callData);\n      setShowIncomingCall(true);\n      \n      // Show browser notification if permission granted\n      if (Notification.permission === 'granted') {\n        new Notification(`${callData.caller.fullName} কল করছেন`, {\n          body: `${callData.callType === 'video' ? 'ভিডিও' : 'অডিও'} কল`,\n          icon: callData.caller.avatar || '/default-avatar.png',\n          tag: 'incoming-call'\n        });\n      }\n    });\n\n    // Listen for call accepted\n    socket.on('call-accepted', (data) => {\n      console.log('Call accepted:', data);\n      setShowVideoCall(true);\n      setCallNotification({\n        type: 'success',\n        message: 'কল গ্রহণ করা হয়েছে'\n      });\n    });\n\n    // Listen for call rejected\n    socket.on('call-rejected', (data) => {\n      console.log('Call rejected:', data);\n      setCallNotification({\n        type: 'error',\n        message: 'কল প্রত্যাখ্যান করা হয়েছে'\n      });\n      handleCallEnd();\n    });\n\n    // Listen for call ended\n    socket.on('call-ended', (data) => {\n      console.log('Call ended:', data);\n      setCallNotification({\n        type: 'info',\n        message: 'কল শেষ হয়েছে'\n      });\n      handleCallEnd();\n    });\n\n    // Listen for user busy\n    socket.on('user-busy', (data) => {\n      console.log('User busy:', data);\n      setCallNotification({\n        type: 'warning',\n        message: 'ব্যবহারকারী ব্যস্ত আছেন'\n      });\n    });\n\n    // Listen for user offline\n    socket.on('user-offline', (data) => {\n      console.log('User offline:', data);\n      setCallNotification({\n        type: 'warning',\n        message: 'ব্যবহারকারী অফলাইন আছেন'\n      });\n    });\n\n    return () => {\n      socket.off('incoming-call');\n      socket.off('call-accepted');\n      socket.off('call-rejected');\n      socket.off('call-ended');\n      socket.off('user-busy');\n      socket.off('user-offline');\n    };\n  }, [socket, user]);\n\n  // Show video call interface when call becomes active\n  useEffect(() => {\n    if (isCallActive && currentCallData) {\n      setShowVideoCall(true);\n      setShowIncomingCall(false);\n    }\n  }, [isCallActive, currentCallData]);\n\n  // Request notification permission on component mount\n  useEffect(() => {\n    if (Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n  }, []);\n\n  const handleAcceptCall = async (callData) => {\n    try {\n      setShowIncomingCall(false);\n      // The actual joining logic is handled in the Agora context\n      // through the IncomingCall component\n    } catch (error) {\n      console.error('Error accepting call:', error);\n      setCallNotification({\n        type: 'error',\n        message: 'কল গ্রহণ করতে সমস্যা হয়েছে'\n      });\n    }\n  };\n\n  const handleRejectCall = async (callData) => {\n    try {\n      setShowIncomingCall(false);\n      setIncomingCall(null);\n    } catch (error) {\n      console.error('Error rejecting call:', error);\n    }\n  };\n\n  const handleCallEnd = async () => {\n    try {\n      setShowVideoCall(false);\n      setShowIncomingCall(false);\n      setIncomingCall(null);\n      await endCall();\n    } catch (error) {\n      console.error('Error ending call:', error);\n    }\n  };\n\n  const handleCloseIncomingCall = () => {\n    setShowIncomingCall(false);\n    setIncomingCall(null);\n  };\n\n  const handleCloseVideoCall = () => {\n    setShowVideoCall(false);\n    handleCallEnd();\n  };\n\n  const handleCloseNotification = () => {\n    setCallNotification(null);\n  };\n\n  return (\n    <>\n      {/* Incoming call dialog */}\n      <IncomingCall\n        isOpen={showIncomingCall}\n        callData={incomingCall}\n        onAccept={handleAcceptCall}\n        onReject={handleRejectCall}\n        onClose={handleCloseIncomingCall}\n      />\n\n      {/* Video call interface */}\n      <VideoCall\n        isOpen={showVideoCall}\n        onClose={handleCloseVideoCall}\n        callData={{\n          otherUser: currentCallData ? (\n            currentCallData.caller?._id === user?._id ? \n            currentCallData.receiver : \n            currentCallData.caller\n          ) : null,\n          ...currentCallData\n        }}\n      />\n\n      {/* Call notifications */}\n      <Snackbar\n        open={!!callNotification}\n        autoHideDuration={4000}\n        onClose={handleCloseNotification}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <Alert \n          onClose={handleCloseNotification} \n          severity={callNotification?.type || 'info'}\n          sx={{ width: '100%' }}\n        >\n          {callNotification?.message}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default CallManager;