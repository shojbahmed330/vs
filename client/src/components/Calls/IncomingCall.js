import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  Box,\n  Typography,\n  Avatar,\n  IconButton,\n  Fab,\n  Paper,\n  Chip\n} from '@mui/material';\nimport {\n  Call,\n  CallEnd,\n  Videocam,\n  Message\n} from '@mui/icons-material';\nimport { motion } from 'framer-motion';\nimport { useAgora } from '../../contexts/AgoraContext';\n\nconst IncomingCall = ({ \n  isOpen, \n  callData, \n  onAccept, \n  onReject, \n  onClose \n}) => {\n  const { joinCall, rejectCall } = useAgora();\n  const [isRinging, setIsRinging] = useState(true);\n  const [callDuration, setCallDuration] = useState(0);\n  \n  // Auto-reject after 30 seconds\n  useEffect(() => {\n    if (isOpen && callData) {\n      const timer = setTimeout(() => {\n        handleReject();\n      }, 30000); // 30 seconds\n      \n      const durationTimer = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n\n      return () => {\n        clearTimeout(timer);\n        clearInterval(durationTimer);\n      };\n    }\n  }, [isOpen, callData]);\n\n  // Play ringtone effect\n  useEffect(() => {\n    let audioContext;\n    let oscillator;\n    \n    if (isRinging && isOpen) {\n      // Create a simple ringtone using Web Audio API\n      try {\n        audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        \n        const playRingtone = () => {\n          oscillator = audioContext.createOscillator();\n          const gainNode = audioContext.createGain();\n          \n          oscillator.connect(gainNode);\n          gainNode.connect(audioContext.destination);\n          \n          oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n          oscillator.frequency.setValueAtTime(1000, audioContext.currentTime + 0.1);\n          \n          gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n          gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);\n          \n          oscillator.start(audioContext.currentTime);\n          oscillator.stop(audioContext.currentTime + 0.5);\n        };\n        \n        const interval = setInterval(playRingtone, 2000);\n        \n        return () => {\n          clearInterval(interval);\n          if (audioContext) {\n            audioContext.close();\n          }\n        };\n      } catch (error) {\n        console.log('Audio not supported:', error);\n      }\n    }\n  }, [isRinging, isOpen]);\n\n  const handleAccept = async () => {\n    try {\n      setIsRinging(false);\n      await joinCall(callData);\n      onAccept && onAccept(callData);\n    } catch (error) {\n      console.error('Error accepting call:', error);\n    }\n  };\n\n  const handleReject = async () => {\n    try {\n      setIsRinging(false);\n      await rejectCall(callData.callId);\n      onReject && onReject(callData);\n      onClose && onClose();\n    } catch (error) {\n      console.error('Error rejecting call:', error);\n      onClose && onClose();\n    }\n  };\n\n  const handleSendMessage = () => {\n    // Quick reply with message\n    setIsRinging(false);\n    handleReject();\n    // Navigate to messages (implement based on your routing)\n  };\n\n  if (!callData) return null;\n\n  const { caller, callType } = callData;\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={onClose}\n      maxWidth=\"sm\"\n      fullWidth\n      PaperProps={{\n        sx: {\n          bgcolor: 'grey.900',\n          color: 'white',\n          borderRadius: 4,\n          overflow: 'hidden'\n        }\n      }}\n    >\n      <Box sx={{ \n        position: 'relative',\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n        p: 4,\n        textAlign: 'center'\n      }}>\n        \n        {/* Incoming call indicator */}\n        <Box sx={{ mb: 2 }}>\n          <Chip \n            label={`${callType === 'video' ? 'ভিডিও' : 'অডিও'} কল আসছে`}\n            color=\"primary\"\n            sx={{ bgcolor: 'rgba(255,255,255,0.2)' }}\n          />\n        </Box>\n\n        {/* Caller avatar with pulse animation */}\n        <motion.div\n          animate={{ \n            scale: isRinging ? [1, 1.1, 1] : 1,\n          }}\n          transition={{ \n            duration: 1,\n            repeat: isRinging ? Infinity : 0,\n            ease: \"easeInOut\"\n          }}\n        >\n          <Avatar\n            src={caller?.avatar}\n            sx={{\n              width: 120,\n              height: 120,\n              mx: 'auto',\n              mb: 2,\n              border: '4px solid rgba(255,255,255,0.3)',\n              fontSize: '3rem'\n            }}\n          >\n            {caller?.fullName?.[0] || caller?.username?.[0]}\n          </Avatar>\n        </motion.div>\n\n        {/* Caller name */}\n        <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold' }}>\n          {caller?.fullName || caller?.username || 'অজানা ব্যবহারকারী'}\n        </Typography>\n\n        {/* Call type and duration */}\n        <Typography variant=\"h6\" color=\"rgba(255,255,255,0.8)\" gutterBottom>\n          {callType === 'video' ? 'ভিডিও কল' : 'অডিও কল'}\n        </Typography>\n        \n        <Typography variant=\"body2\" color=\"rgba(255,255,255,0.6)\">\n          {Math.floor(callDuration / 60)}:{(callDuration % 60).toString().padStart(2, '0')}\n        </Typography>\n\n        {/* Action buttons */}\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'center', \n          alignItems: 'center',\n          gap: 3,\n          mt: 4\n        }}>\n          \n          {/* Quick message button */}\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n          >\n            <IconButton\n              onClick={handleSendMessage}\n              sx={{\n                bgcolor: 'rgba(255,255,255,0.2)',\n                color: 'white',\n                '&:hover': {\n                  bgcolor: 'rgba(255,255,255,0.3)'\n                }\n              }}\n            >\n              <Message />\n            </IconButton>\n          </motion.div>\n\n          {/* Reject button */}\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n          >\n            <Fab\n              color=\"error\"\n              onClick={handleReject}\n              sx={{ \n                bgcolor: '#f44336',\n                '&:hover': {\n                  bgcolor: '#d32f2f'\n                }\n              }}\n            >\n              <CallEnd />\n            </Fab>\n          </motion.div>\n\n          {/* Accept button */}\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            animate={{\n              boxShadow: isRinging ? [\n                '0 0 0 0 rgba(76, 175, 80, 0.7)',\n                '0 0 0 10px rgba(76, 175, 80, 0)',\n                '0 0 0 20px rgba(76, 175, 80, 0)'\n              ] : '0 0 0 0 rgba(76, 175, 80, 0)'\n            }}\n            transition={{\n              duration: 1.5,\n              repeat: isRinging ? Infinity : 0\n            }}\n          >\n            <Fab\n              color=\"success\"\n              onClick={handleAccept}\n              size=\"large\"\n              sx={{ \n                bgcolor: '#4caf50',\n                '&:hover': {\n                  bgcolor: '#388e3c'\n                }\n              }}\n            >\n              {callType === 'video' ? <Videocam /> : <Call />}\n            </Fab>\n          </motion.div>\n\n        </Box>\n\n        {/* Quick reply suggestions */}\n        <Box sx={{ mt: 3 }}>\n          <Typography variant=\"caption\" color=\"rgba(255,255,255,0.6)\" gutterBottom>\n            দ্রুত উত্তর:\n          </Typography>\n          <Box sx={{ display: 'flex', gap: 1, justifyContent: 'center', flexWrap: 'wrap', mt: 1 }}>\n            {[\n              'এখন কথা বলতে পারছি না',\n              'পরে কল করবো',\n              'মিটিংয়ে আছি'\n            ].map((message, index) => (\n              <Chip\n                key={index}\n                label={message}\n                onClick={() => handleSendMessage()}\n                size=\"small\"\n                sx={{\n                  bgcolor: 'rgba(255,255,255,0.1)',\n                  color: 'white',\n                  '&:hover': {\n                    bgcolor: 'rgba(255,255,255,0.2)'\n                  }\n                }}\n              />\n            ))}\n          </Box>\n        </Box>\n\n        {/* Decorative elements */}\n        <Box sx={{\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          width: 20,\n          height: 20,\n          borderRadius: '50%',\n          bgcolor: isRinging ? '#4caf50' : 'rgba(255,255,255,0.3)'\n        }} />\n        \n        <Box sx={{\n          position: 'absolute',\n          bottom: 20,\n          left: 20,\n          width: 15,\n          height: 15,\n          borderRadius: '50%',\n          bgcolor: 'rgba(255,255,255,0.2)'\n        }} />\n      </Box>\n    </Dialog>\n  );\n};\n\nexport default IncomingCall;